{"version":3,"sources":["settings.ts","InitialScreen.tsx","sig-server-client.ts","Spinner.tsx","user-media.ts","PubScreen.tsx","errors.ts","SubScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["wsProtocol","window","location","protocol","srvUrl","host","Settings","WS_SRV_URL","concat","MAIN_DIV_CLASS","InitialScreen","p","c","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickPub","bind","assertThisInitialized","onClickSub","onKeyPress","handleSessIdChange","handleNickNameChnage","state","sessId","nickName","react_default","a","createElement","Fragment","className","type","placeholder","value","onChange","style","textAlign","onClick","minHeight","display","props","error","role","marginTop","e","setState","target","trim","evt","event","keyCode","which","onDecision","mode","Date","now","toString","sessionId","React","Component","spleep","msec","Promise","resolve","setTimeout","SigServerClient","url","onCandidate","onOffer","onAnswer","ws","pendingPromise","previousReconnectTime","createClass","key","reject","console","log","WebSocket","reconnect","onopen","onerror","warn","onmessage","onMessage","onclose","_this2","numbers","Uint8Array","letters","crypto","getRandomValues","forEach","n","push","join","generateRandomString","send","sess_id","_this3","nickname","obj","JSON","stringify","msg","json","parse","data","message","handleLoginResp","handleCandidate","handleOffer","handleAnswer","handleJoinResp","resp","status","Error","candidate","offer","answer","_this4","delay","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","connect","abrupt","t0","logIn","stop","Spinner","width","height","UserMedia","opts","canGetDisplayMedia","audio","video","cursor","navigator","mediaDevices","getDisplayMedia","RtcConnConfig","iceServers","urls","username","credential","maxRateKbps","subscribers","tmpConn","candidatesBuff","offerSent","PubScreen","videoRef","userMedia","loading","createRef","copySessIdToClipboard","_callee2","sigServer","createTmpConn","sendOffer","stream","_context2","strm","RTCPeerConnection","addStream","onicecandidate","off","length","cand","getSessId","sent","current","srcObject","createOffer","setLocalDescription","setRemoteDescription","RTCSessionDescription","ref","autoPlay","border","borderRadius","getActiveElement","clipboard","writeText","src_Spinner","translateErrCode","errCode","SubScreen","exitOk","rtcConnection","ontrack","streams","position","top","left","createAnswer","then","addIceCandidate","RTCIceCandidate","onExit","background","right","zIndex","fontSize","App","onUserDecision","getActiveComponent","err","appMode","undefined","decision","PubScreen_PubScreen","SubScreen_SubScreen","InitialScreen_InitialScreen","Boolean","hostname","match","replace","href","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a57ccd3f.chunk.js","sourcesContent":["interface ISettings {\r\n    WS_SRV_URL: string;\r\n    MAIN_DIV_CLASS: string;\r\n}\r\n\r\nconst wsProtocol = (window.location.protocol === \"https:\") ? \"wss\" : \"ws\";\r\n\r\nconst srvUrl = process.env.NODE_ENV === \"production\" ?\r\n    window.location.host : \"localhost:3322\";\r\n\r\nexport const Settings: ISettings = {\r\n    WS_SRV_URL: `${wsProtocol}://${srvUrl}`,\r\n    MAIN_DIV_CLASS: \"col-sm-6 col-md-4 col-lg-4 offset-sm-3 offset-md-4 offset-lg-4\",\r\n};\r\n","import React from \"react\";\nimport { IUserAppMode } from \"./interfaces\";\nimport { Settings} from \"./settings\";\n\nconst { MAIN_DIV_CLASS } = Settings;\n\nconst CHAR_CODE_ENTER = 13;\n\ninterface IProps {\n    onDecision: (d: IUserAppMode) => void;\n    error: string;\n}\n\ninterface IState {\n    sessId: string;\n    nickName: string;\n}\n\nexport default class InitialScreen extends React.Component<IProps, IState> {\n\n    constructor(p: IProps, c: any) {\n        super(p, c);\n        this.onClickPub = this.onClickPub.bind(this);\n        this.onClickSub = this.onClickSub.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n        this.handleSessIdChange = this.handleSessIdChange.bind(this);\n        this.handleNickNameChnage = this.handleNickNameChnage.bind(this);\n        this.state = {\n            sessId: \"\",\n            nickName: \"\",\n        };\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <div className=\"row\">\n                    <div className={MAIN_DIV_CLASS}>\n                        <div className=\"input-group mb-3\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Session ID\"\n                                value={this.state.sessId}\n                                onChange={this.handleSessIdChange}\n                                onKeyPress={this.onKeyPress}\n                                style={{textAlign: \"center\"}}\n                            />\n                        </div>\n                        {   // tslint:disable-next-line: jsx-no-multiline-js\n                            /* <div className=\"input-group mb-3\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Nickname\"\n                                value={this.state.nickName}\n                                onChange={this.handleNickNameChnage}\n                            />\n                        </div> */}\n                        <button\n                            className=\"btn btn-primary btn-block\"\n                            onClick={this.onClickSub}\n                        >\n                            Join session\n                        </button>\n                    </div>\n                </div>\n                <div style={{minHeight: \"2em\"}}/>\n                <div className=\"row\">\n                    <div className={MAIN_DIV_CLASS}>\n                        <button\n                            className=\"btn btn-success btn-block\"\n                            onClick={this.onClickPub}\n                        >\n                            Create session\n                        </button>\n                    </div>\n                </div>\n                <div\n                    className=\"row\"\n                    style={{ display: this.props.error ? \"block\" : \"none\" }}\n                >\n                    <div className={MAIN_DIV_CLASS}>\n                        <div\n                            className=\"alert alert-danger\"\n                            role=\"alert\"\n                            style={{marginTop: \"1em\"}}\n                        >\n                            {this.props.error}\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private handleSessIdChange(e: any) {\n        this.setState({sessId: e.target.value.trim()});\n    }\n\n    private handleNickNameChnage(e: any) {\n        this.setState({nickName: e.target.value.trim()});\n    }\n\n    private onKeyPress(evt: any) {\n        evt = evt || window.event;\n        const charCode = evt.keyCode || evt.which;\n        if (charCode === CHAR_CODE_ENTER) {\n            this.onClickSub(null);\n        }\n    }\n\n    private onClickPub(e: any) {\n        this.props.onDecision({\n            mode: \"pub\",\n        });\n    }\n\n    private onClickSub(e: any) {\n        this.props.onDecision({\n            mode: \"sub\",\n            // nickName:  this.state.nickName,\n            nickName: Date.now().toString(),\n            sessionId: this.state.sessId,\n        });\n    }\n}\n","import { IObj } from \"./interfaces\";\r\n\r\n// TODO: finish\r\n\r\nfunction generateRandomString(): string {\r\n    const len = 3;\r\n    const numbers = new Uint8Array(len);\r\n    const letters: string[] = [];\r\n    window.crypto.getRandomValues(numbers);\r\n    numbers.forEach( (n) => letters.push(n.toString(16)) );\r\n    return letters.join(\"\");\r\n}\r\n\r\nfunction spleep(msec: number) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, msec);\r\n    });\r\n}\r\n\r\nexport class SigServerClient {\r\n\r\n    public onCandidate: any;\r\n    public onOffer: any;\r\n    public onAnswer: any;\r\n\r\n    private url: string;\r\n    private ws: any;\r\n    private pendingPromise: any;\r\n    private sessId: string;\r\n    private previousReconnectTime: number;\r\n\r\n    constructor(url: string) {\r\n        this.url = url;\r\n        this.ws = null;\r\n        this.pendingPromise = {};\r\n        this.sessId = \"\";\r\n        this.previousReconnectTime = 0;\r\n    }\r\n\r\n    public getSessId() {\r\n        return this.sessId;\r\n    }\r\n\r\n    public connect() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                console.log(\"try construct websocket\");\r\n                this.ws = new WebSocket(this.url);\r\n                console.log(\"ws constructed\");\r\n            } catch (e) {\r\n                console.log(\"ws construct:: err\");\r\n                reject(e);\r\n                return this.reconnect();\r\n            }\r\n\r\n            this.ws.onopen = resolve;\r\n            this.ws.onerror = (e: Error) => {\r\n                console.warn(\"ws::on_error::\" + e);\r\n            };\r\n            this.ws.onmessage = this.onMessage.bind(this);\r\n            this.ws.onclose = () => {\r\n                this.ws.onerror = null;\r\n                this.ws.onmessage = null;\r\n                console.log(\"ws closed, gonna reconnect\");\r\n                if (Date.now() - this.previousReconnectTime < 2000) {\r\n                    console.log(`wait 2000 msec before reconnect`);\r\n                    setTimeout(this.reconnect.bind(this), 2000);\r\n                } else {\r\n                    this.reconnect();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public logIn(sessionId?: string) {\r\n        return new Promise((resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            if (!sessionId) {\r\n                sessionId = generateRandomString();\r\n                this.sessId = sessionId;\r\n            } else {\r\n                console.log(`login, sessId=${sessionId} (${typeof sessionId})`);\r\n            }\r\n            this.send({\r\n                type: \"login\",\r\n                sess_id: sessionId,\r\n            });\r\n        });\r\n    }\r\n\r\n    public join(sessId: string, nickName: string) {\r\n        return new Promise((resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            this.send({\r\n                type: \"join\",\r\n                sess_id: sessId,\r\n                nickname: nickName,\r\n            });\r\n        });\r\n    }\r\n\r\n    public send(obj: IObj) {\r\n        this.ws.send(JSON.stringify(obj));\r\n    }\r\n\r\n    private onMessage(msg: any) {\r\n        let json: any = {};\r\n        try {\r\n            json = JSON.parse(msg.data);\r\n        } catch (e) {\r\n            console.warn(\"ws: \" + e.message + \". msg.data=\" + msg.data);\r\n            return;\r\n        }\r\n        console.log(\"ws: \", json);\r\n        switch (json.type) {\r\n        case \"login_resp\":\r\n            this.handleLoginResp(json);\r\n            break;\r\n        case \"candidate\":\r\n            this.handleCandidate(json);\r\n            break;\r\n        case \"offer\":\r\n            this.handleOffer(json);\r\n            break;\r\n        case \"answer\":\r\n            this.handleAnswer(json);\r\n            break;\r\n        case \"join_resp\":\r\n            this.handleJoinResp(json);\r\n            break;\r\n        }\r\n    }\r\n\r\n    private handleLoginResp(resp: any) {\r\n        if (resp.status === \"ok\") {\r\n            this.pendingPromise.resolve(this.sessId);\r\n        } else {\r\n            this.pendingPromise.reject(new Error(resp.error));\r\n        }\r\n        this.pendingPromise = {};\r\n    }\r\n\r\n    private handleJoinResp(resp: any) {\r\n        if (resp.status === \"ok\") {\r\n            this.pendingPromise.resolve();\r\n        } else {\r\n            this.pendingPromise.reject(new Error(resp.error));\r\n        }\r\n        this.pendingPromise = {};\r\n    }\r\n\r\n    private handleCandidate(msg: any) {\r\n        console.log(Date.now() + \" ws: got candidate\");\r\n        if (this.onCandidate && typeof this.onCandidate === \"function\") {\r\n            this.onCandidate(msg.candidate);\r\n        }\r\n    }\r\n\r\n    private handleOffer(msg: any) {\r\n        console.log(Date.now() + \" ws: got offer\");\r\n        if (!msg.offer) {\r\n            console.warn(\".offer is \" + msg.offer);\r\n            return;\r\n        }\r\n        if (this.onOffer && typeof this.onOffer === \"function\") {\r\n            this.onOffer(msg.offer);\r\n        }\r\n    }\r\n\r\n    private handleAnswer(msg: any) {\r\n        console.log(Date.now() + \" ws: got answer\");\r\n        if (this.onAnswer && typeof this.onAnswer === \"function\") {\r\n            this.onAnswer(msg.answer);\r\n        }\r\n    }\r\n\r\n    private reconnect() {\r\n        this.previousReconnectTime = Date.now();\r\n        this.ws = null;\r\n        const minDelay = 1;\r\n        const maxDelay = 10;\r\n        let delay = minDelay;\r\n        (async () => {\r\n            while (true) {\r\n                try {\r\n                    console.log(\"try reconnect\");\r\n                    await this.connect();\r\n                    break;\r\n                } catch (e) {\r\n                    console.warn(e);\r\n                    if (delay < maxDelay) {\r\n                        delay++;\r\n                    }\r\n                    console.log(`reconnect failed, now sleeping ${delay} sec`);\r\n                    await spleep(delay * 1000);\r\n                }\r\n            }\r\n            console.log(\"reconnected\");\r\n            if (this.sessId) {\r\n                console.log(\"was logged in before, logging after reconnect\");\r\n                await this.logIn(this.sessId);\r\n                console.log(\"login after reconnect: ok\");\r\n            }\r\n        })();\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Spinner: React.FC = () => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n            <div\r\n                className=\"spinner-border\"\r\n                style={{width: \"3rem\", height: \"3rem\"}}\r\n                role=\"status\"\r\n            >\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import { IObj } from \"./interfaces\";\r\n\r\nexport class UserMedia {\r\n\r\n    public getDisplayMedia(opts?: IObj): Promise<MediaStream> {\r\n        if (!this.canGetDisplayMedia()) {\r\n            throw new Error(\"old browser\");\r\n        }\r\n        if (!opts) {\r\n            opts = {\r\n                audio: false,\r\n                video: {\r\n                    cursor: \"never\",\r\n                },\r\n            };\r\n        }\r\n        return (navigator.mediaDevices as any).getDisplayMedia(opts);\r\n    }\r\n\r\n    public canGetDisplayMedia(): boolean {\r\n        return navigator.mediaDevices && !!(navigator.mediaDevices as any).getDisplayMedia;\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\n\r\nimport { IObj } from \"./interfaces\";\r\nimport { Settings } from \"./settings\";\r\nimport { SigServerClient } from \"./sig-server-client\";\r\nimport Spinner from \"./Spinner\";\r\nimport { UserMedia } from \"./user-media\";\r\n\r\nconst { MAIN_DIV_CLASS } = Settings;\r\n\r\nconst RtcConnConfig: IObj = {\r\n    iceServers: [{\r\n        urls: \"stun:stun.l.google.com:19302\",\r\n    }, {\r\n        urls: \"turn:numb.viagenie.ca\",\r\n        username: \"webrtc\",\r\n        credential: \"123qwe\",\r\n    }, {\r\n        credential: \"A/zNH/sv9dAKXqNtlBHOpEzBggY=\",\r\n        maxRateKbps: \"8000\",\r\n        urls: [\r\n            \"turn:64.233.161.127:19305?transport=udp\",\r\n            \"turn:[2a00:1450:4010:c01::7f]:19305?transport=udp\",\r\n            \"turn:64.233.161.127:19305?transport=tcp\",\r\n            \"turn:[2a00:1450:4010:c01::7f]:19305?transport=tcp\",\r\n        ],\r\n        username: \"CKqD9ukFEgZRyXfhhtwYqvGggqMKIICjBQ\",\r\n    }],\r\n};\r\n\r\ninterface IState {\r\n    sessId: string;\r\n    error: string;\r\n    loading: boolean;\r\n}\r\n\r\n// dictionary. key = nick; val = rtcpeerconn\r\nconst subscribers: IObj = {\r\n\r\n};\r\n\r\nlet tmpConn: any = null;\r\n\r\nlet candidatesBuff: IObj[] = [];\r\nlet offerSent: boolean = false;\r\n\r\nexport default class PubScreen extends React.Component<{}, IState> {\r\n\r\n    private videoRef: RefObject<HTMLVideoElement>;\r\n    private userMedia: UserMedia;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            sessId: \"\",\r\n            error: \"\",\r\n            loading: true,\r\n        };\r\n        this.videoRef = React.createRef<HTMLVideoElement>();\r\n        this.userMedia = new UserMedia();\r\n        this.copySessIdToClipboard = this.copySessIdToClipboard.bind(this);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (!this.userMedia.canGetDisplayMedia()) {\r\n            this.setState({error: \"you have an old browser, go get a newer one\"});\r\n            return;\r\n        }\r\n        // (async () => {\r\n        //     const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n        //     console.log(\"gona connect\");\r\n        //     await sigServer.connect();\r\n        //     console.log(\"connected\");\r\n\r\n        //     await sigServer.logIn();\r\n        //     const sessId: string = sigServer.getSessId();\r\n        //     console.log(\"logged in with sess_id=\" + sessId);\r\n\r\n        //     const stream = await this.userMedia.getDisplayMedia();\r\n        //     console.log(stream);\r\n\r\n        //     if (this.videoRef.current) {\r\n        //         this.videoRef.current.srcObject = stream;\r\n        //     }\r\n\r\n        //     const rtcConnection: any = new RTCPeerConnection({});\r\n        //     rtcConnection.addStream(stream);\r\n\r\n        //     // Setup ice handling\r\n        //     rtcConnection.onicecandidate = (event: any) => {\r\n        //         console.log(\"on ice\");\r\n        //         if (event.candidate) {\r\n        //             sigServer.send({\r\n        //                 type: \"candidate\",\r\n        //                 candidate: event.candidate,\r\n        //             });\r\n        //         }\r\n        //     };\r\n\r\n        //     const offer = await rtcConnection.createOffer();\r\n        //     console.log(\"offer created\");\r\n        //     rtcConnection.setLocalDescription(offer);\r\n\r\n        //     sigServer.onAnswer = (answer: any) => {\r\n        //         rtcConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n        //         console.log(\"got answer\");\r\n        //     };\r\n\r\n        //     sigServer.send({\r\n        //         type: \"offer\",\r\n        //         offer,\r\n        //     });\r\n\r\n        //     this.setState({sessId});\r\n        // })();\r\n\r\n        (async () => {\r\n            try {\r\n                const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n                const createTmpConn = (strm: any) => {\r\n                    candidatesBuff = [];\r\n                    tmpConn = new RTCPeerConnection(RtcConnConfig);\r\n                    tmpConn.addStream(stream);\r\n                    tmpConn.onicecandidate = function (event: any) {\r\n                        console.log(\"on ice\");\r\n                        if (event.candidate) {\r\n                            if (offerSent) {\r\n                                sigServer.send({\r\n                                    type: \"candidate\",\r\n                                    candidate: event.candidate,\r\n                                });\r\n                                console.log(\"candidate sent\");\r\n                            } else {\r\n                                console.log(\"candidate buffered\");\r\n                                candidatesBuff.push(event.candidate);\r\n                            }\r\n                        } else {\r\n                            console.log(\"no event.candidate::\");\r\n                            console.log(event);\r\n                        }\r\n                    };\r\n                };\r\n\r\n                const sendOffer = (off: any) => {\r\n                    sigServer.send({\r\n                        type: \"offer\",\r\n                        offer: off,\r\n                    });\r\n                    offerSent = true;\r\n                    if (candidatesBuff.length) {\r\n                        candidatesBuff.forEach((cand) => {\r\n                            sigServer.send({\r\n                                type: \"candidate\",\r\n                                candidate: cand,\r\n                            });\r\n                        });\r\n                    }\r\n                };\r\n\r\n                console.log(\"gona connect\");\r\n                await sigServer.connect();\r\n                console.log(\"connected\");\r\n\r\n                await sigServer.logIn();\r\n                const sessId = sigServer.getSessId();\r\n                console.log(\"logged in with sess_id=\" + sessId);\r\n\r\n                const stream = await this.userMedia.getDisplayMedia();\r\n\r\n                if (this.videoRef.current) {\r\n                    this.videoRef.current.srcObject = stream;\r\n                }\r\n\r\n                createTmpConn(stream);\r\n\r\n                const offer = await tmpConn.createOffer();\r\n                console.log(\"offer created\");\r\n                tmpConn.setLocalDescription(offer);\r\n\r\n                sigServer.onAnswer = (answer: any) => {\r\n                    tmpConn.onicecandidate = () => {};\r\n                    tmpConn.setRemoteDescription(new RTCSessionDescription(answer));\r\n                    console.log(\"got answer\");\r\n                    subscribers[answer.nickname] = tmpConn;\r\n                    (async () => {\r\n                        console.log(\"creating new tmp connection...\");\r\n                        createTmpConn(stream);\r\n                        const offer = await tmpConn.createOffer();\r\n                        console.log(\"new offer created\");\r\n                        tmpConn.setLocalDescription(offer);\r\n                        sendOffer(offer);\r\n                    })();\r\n                };\r\n\r\n                sendOffer(offer);\r\n\r\n                this.setState({sessId, loading: false});\r\n            } catch (e) {\r\n                console.error(e);\r\n                this.setState({error: e.message});\r\n            }\r\n        })();\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className={MAIN_DIV_CLASS}>\r\n                    <video\r\n                        ref={this.videoRef}\r\n                        autoPlay={true}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: this.state.loading ? \"none\" : \"block\",\r\n                            border: \"1px solid darkgray\",\r\n                            borderRadius: \"0.5em\",\r\n                        }}\r\n                    />\r\n                    {this.getActiveElement()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private copySessIdToClipboard() {\r\n        if (navigator.clipboard && navigator.clipboard.writeText) {\r\n            navigator.clipboard.writeText(this.state.sessId);\r\n        }\r\n    }\r\n\r\n    private getActiveElement(): JSX.Element {\r\n        if (this.state.error) {\r\n            return (\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    {this.state.error}\r\n                </div>\r\n            );\r\n        } else {\r\n            if (this.state.loading) {\r\n                return <Spinner/>;\r\n            } else {\r\n                return (\r\n                    <React.Fragment>\r\n                        <h5 style={{marginTop: \"2em\"}}>\r\n                            Session ID:  <b>{this.state.sessId}</b>\r\n                            &nbsp;&nbsp;\r\n                            <button\r\n                                className=\"btn btn-secondary btn-sm\"\r\n                                onClick={this.copySessIdToClipboard}\r\n                            >\r\n                                Copy\r\n                            </button>\r\n                        </h5>\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","export function translateErrCode(errCode: string): string {\r\n    switch (errCode) {\r\n    case \"ENOTFOUND\":\r\n        return \"Session with given ID not found\";\r\n    default:\r\n        return errCode;\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\nimport { translateErrCode } from \"./errors\";\r\nimport { IObj } from \"./interfaces\";\r\nimport { Settings } from \"./settings\";\r\nimport { SigServerClient } from \"./sig-server-client\";\r\n\r\nconst RtcConnConfig: IObj = {\r\n    iceServers: [{\r\n        urls: \"stun:stun.l.google.com:19302\",\r\n    }, {\r\n        urls: \"turn:numb.viagenie.ca\",\r\n        username: \"webrtc\",\r\n        credential: \"123qwe\",\r\n    }, {\r\n        credential: \"A/zNH/sv9dAKXqNtlBHOpEzBggY=\",\r\n        maxRateKbps: \"8000\",\r\n        urls: [\r\n            \"turn:64.233.161.127:19305?transport=udp\",\r\n            \"turn:[2a00:1450:4010:c01::7f]:19305?transport=udp\",\r\n            \"turn:64.233.161.127:19305?transport=tcp\",\r\n            \"turn:[2a00:1450:4010:c01::7f]:19305?transport=tcp\",\r\n        ],\r\n        username: \"CKqD9ukFEgZRyXfhhtwYqvGggqMKIICjBQ\",\r\n    }],\r\n};\r\n\r\ninterface IProps {\r\n    sessId: string;\r\n    nickName: string;\r\n    onExit: (e?: Error) => void;\r\n}\r\n\r\nexport default class SubScreen extends React.Component<IProps, {}> {\r\n\r\n    private videoRef: RefObject<HTMLVideoElement>;\r\n\r\n    constructor(p: IProps) {\r\n        super(p);\r\n        this.state = {\r\n            error: \"\",\r\n        };\r\n        this.videoRef = React.createRef<HTMLVideoElement>();\r\n        this.exitOk = this.exitOk.bind(this);\r\n        console.log(\"sub screen ctor::ws_srv_url:\" + Settings.WS_SRV_URL);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const nickname = this.props.nickName;\r\n        const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n        (async () => {\r\n            console.log(\"sub: gona connect\");\r\n            await sigServer.connect();\r\n            console.log(\"sub: connected\");\r\n\r\n            const rtcConnection = new RTCPeerConnection(RtcConnConfig);\r\n\r\n            rtcConnection.ontrack = (e) => {\r\n                if (this.videoRef.current) {\r\n                    this.videoRef.current.srcObject = e.streams[0];\r\n                    this.videoRef.current.style.position = \"absolute\";\r\n                    this.videoRef.current.style.top = \"0px\";\r\n                    this.videoRef.current.style.left = \"0px\";\r\n                } else {\r\n                    throw new Error(\"sth went wrong\");\r\n                }\r\n            };\r\n\r\n            rtcConnection.onicecandidate = (event) => {\r\n                console.log(\"on ice\");\r\n                if (event.candidate) {\r\n                    sigServer.send({\r\n                        type: \"candidate\",\r\n                        candidate: event.candidate,\r\n                        nickname,\r\n                    });\r\n                }\r\n            };\r\n\r\n            sigServer.onOffer = (offer: RTCSessionDescriptionInit) => {\r\n                console.log(\"sub:: onoffer: \", offer);\r\n                try {\r\n                    rtcConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n                    rtcConnection.createAnswer().then((answer) => {\r\n                        rtcConnection.setLocalDescription(answer);\r\n                        sigServer.send({\r\n                            type: \"answer\",\r\n                            answer,\r\n                            nickname,\r\n                        });\r\n                    }, (error) => {\r\n                        console.error(error);\r\n                    });\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n\r\n            };\r\n\r\n            sigServer.onCandidate = (cand: RTCIceCandidateInit) => {\r\n                rtcConnection.addIceCandidate(new RTCIceCandidate(cand));\r\n            };\r\n\r\n            try {\r\n                await sigServer.join(this.props.sessId, nickname);\r\n            } catch (e) {\r\n                console.warn(e);\r\n                this.props.onExit(new Error(\r\n                    translateErrCode(e.message),\r\n                ));\r\n            }\r\n        })();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-xs-12\">\r\n                    <video ref={this.videoRef} autoPlay={true} style={{width: \"100%\" }}/>\r\n                    <div\r\n                        // tslint:disable-next-line: jsx-no-multiline-js\r\n                        style={{\r\n                            background: \"rgba(0, 255, 0, .5)\",\r\n                            width: 50,\r\n                            height: 50,\r\n                            position: \"absolute\",\r\n                            top: 0,\r\n                            right: 0,\r\n                            zIndex: 2,\r\n                            textAlign: \"center\",\r\n                            fontSize: \"2em\",\r\n                            cursor: \"pointer\",\r\n                        }}\r\n                        onClick={this.exitOk}\r\n                    >X\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private exitOk() {\r\n        this.props.onExit();\r\n    }\r\n}\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport InitialScreen from \"./InitialScreen\";\nimport { IUserAppMode } from \"./interfaces\";\nimport PubScreen from \"./PubScreen\";\nimport SubScreen from \"./SubScreen\";\n\ninterface IState {\n    appMode?: IUserAppMode;\n    error: string;\n}\n\nexport default class App extends React.Component<{}, IState> {\n\n    constructor(p: {}, c: any) {\n        super(p, c);\n        this.state = {\n            error: \"\",\n        };\n        this.onUserDecision = this.onUserDecision.bind(this);\n        this.onExit = this.onExit.bind(this);\n    }\n\n    public render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <h1 className=\"col-sm-12 App-header2\" style={{textAlign: \"center\"}}>\n                        BeamViewer\n                    </h1>\n                </div>\n                {this.getActiveComponent()}\n            </div>\n        );\n    }\n\n    private onExit(err?: Error) {\n        if (err) {\n            this.setState({appMode: undefined, error: err.message});\n        } else {\n            this.setState({appMode: undefined});\n        }\n    }\n\n    private onUserDecision(decision: IUserAppMode) {\n        this.setState({appMode: decision});\n    }\n\n    private getActiveComponent(): JSX.Element {\n        if (this.state.appMode) {\n            if (this.state.appMode.mode === \"pub\") {\n                return <PubScreen/>;\n            } else if (this.state.appMode.mode === \"sub\") {\n                return (\n                    <SubScreen\n                        nickName={this.state.appMode.nickName}\n                        sessId={this.state.appMode.sessionId}\n                        onExit={this.onExit}\n                    />\n                );\n            } else {\n                throw new Error();\n            }\n        } else {\n            return (\n                <InitialScreen\n                    onDecision={this.onUserDecision}\n                    error={this.state.error}\n                />\n            );\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nif (process.env.NODE_ENV === \"production\" &&\n    window.location.protocol === \"http:\" &&\n    window.location.hostname !== \"localhost\") {\n    console.log(\"redirect to https\");\n    // screen capture api only works via https\n    window.location.replace(window.location.href.replace(\"http:\", \"https:\"));\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\nserviceWorker.unregister();\n"],"sourceRoot":""}