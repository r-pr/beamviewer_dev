{"version":3,"sources":["settings.ts","InitialScreen.tsx","sig-server-client.ts","Spinner.tsx","user-media.ts","PubScreen.tsx","errors.ts","SubScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["srvHost","window","location","host","wsProtocol","protocol","Settings","HTTP_SRV_URL","concat","WS_SRV_URL","MAIN_DIV_CLASS","DEFAULT_ICE_SERVERS","urls","InitialScreen","p","c","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickPub","bind","assertThisInitialized","onClickSub","onKeyPress","handleSessIdChange","handleNickNameChnage","state","sessId","nickName","react_default","a","createElement","Fragment","className","type","placeholder","value","onChange","style","textAlign","onClick","minHeight","display","props","error","role","marginTop","e","setState","target","trim","evt","event","keyCode","which","onDecision","mode","Date","now","toString","sessionId","React","Component","spleep","msec","Promise","resolve","setTimeout","SigServerClient","url","onCandidate","onOffer","onAnswer","ws","pendingPromise","previousReconnectTime","createClass","key","_getIceServers","asyncToGenerator","regenerator_default","mark","_callee","resp","wrap","_context","prev","next","axios","get","sent","status","data","iceServers","console","warn","abrupt","stop","apply","arguments","reject","log","WebSocket","reconnect","onopen","onerror","onmessage","onMessage","onclose","_this2","numbers","Uint8Array","letters","crypto","getRandomValues","forEach","n","push","join","generateRandomString","send","sess_id","_this3","nickname","obj","JSON","stringify","msg","json","parse","message","handleLoginResp","handleCandidate","handleOffer","handleAnswer","handleJoinResp","Error","candidate","offer","answer","_this4","delay","_callee2","_context2","connect","t0","logIn","Spinner","width","height","UserMedia","opts","canGetDisplayMedia","audio","video","cursor","navigator","mediaDevices","getDisplayMedia","subscribers","tmpConn","candidatesBuff","offerSent","PubScreen","videoRef","userMedia","loading","createRef","copySessIdToClipboard","sigServer","createTmpConn","sendOffer","stream","getIceServers","strm","RTCPeerConnection","addStream","onicecandidate","off","length","cand","getSessId","current","srcObject","createOffer","setLocalDescription","setRemoteDescription","RTCSessionDescription","ref","autoPlay","border","borderRadius","getActiveElement","clipboard","writeText","src_Spinner","translateErrCode","errCode","SubScreen","exitOk","rtcConnection","ontrack","streams","position","top","left","createAnswer","then","addIceCandidate","RTCIceCandidate","onExit","background","right","zIndex","fontSize","App","onUserDecision","getActiveComponent","err","appMode","undefined","decision","PubScreen_PubScreen","SubScreen_SubScreen","InitialScreen_InitialScreen","Boolean","hostname","match","replace","href","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd0c631b.chunk.js","sourcesContent":["interface ISettings {\r\n    HTTP_SRV_URL: string;\r\n    WS_SRV_URL: string;\r\n    MAIN_DIV_CLASS: string;\r\n    DEFAULT_ICE_SERVERS: RTCIceServer[];\r\n}\r\n\r\nconst srvHost = process.env.NODE_ENV === \"production\" ?\r\n    window.location.host : \"localhost:3322\";\r\n\r\nconst wsProtocol = (window.location.protocol === \"https:\") ? \"wss:\" : \"ws:\";\r\n\r\nexport const Settings: ISettings = {\r\n    HTTP_SRV_URL: `${window.location.protocol}//${srvHost}`,\r\n    WS_SRV_URL: `${wsProtocol}//${srvHost}`,\r\n    MAIN_DIV_CLASS: \"col-sm-6 col-md-4 col-lg-4 offset-sm-3 offset-md-4 offset-lg-4\",\r\n    DEFAULT_ICE_SERVERS: [{\r\n        urls: \"stun:stun.l.google.com:19302\",\r\n    }],\r\n};\r\n","import React from \"react\";\nimport { IUserAppMode } from \"./interfaces\";\nimport { Settings} from \"./settings\";\n\nconst { MAIN_DIV_CLASS } = Settings;\n\nconst CHAR_CODE_ENTER = 13;\n\ninterface IProps {\n    onDecision: (d: IUserAppMode) => void;\n    error: string;\n}\n\ninterface IState {\n    sessId: string;\n    nickName: string;\n}\n\nexport default class InitialScreen extends React.Component<IProps, IState> {\n\n    constructor(p: IProps, c: any) {\n        super(p, c);\n        this.onClickPub = this.onClickPub.bind(this);\n        this.onClickSub = this.onClickSub.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n        this.handleSessIdChange = this.handleSessIdChange.bind(this);\n        this.handleNickNameChnage = this.handleNickNameChnage.bind(this);\n        this.state = {\n            sessId: \"\",\n            nickName: \"\",\n        };\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <div className=\"row\">\n                    <div className={MAIN_DIV_CLASS}>\n                        <div className=\"input-group mb-3\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Session ID\"\n                                value={this.state.sessId}\n                                onChange={this.handleSessIdChange}\n                                onKeyPress={this.onKeyPress}\n                                style={{textAlign: \"center\"}}\n                            />\n                        </div>\n                        {   // tslint:disable-next-line: jsx-no-multiline-js\n                            /* <div className=\"input-group mb-3\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Nickname\"\n                                value={this.state.nickName}\n                                onChange={this.handleNickNameChnage}\n                            />\n                        </div> */}\n                        <button\n                            className=\"btn btn-primary btn-block\"\n                            onClick={this.onClickSub}\n                        >\n                            Join session\n                        </button>\n                    </div>\n                </div>\n                <div style={{minHeight: \"2em\"}}/>\n                <div className=\"row\">\n                    <div className={MAIN_DIV_CLASS}>\n                        <button\n                            className=\"btn btn-success btn-block\"\n                            onClick={this.onClickPub}\n                        >\n                            Create session\n                        </button>\n                    </div>\n                </div>\n                <div\n                    className=\"row\"\n                    style={{ display: this.props.error ? \"block\" : \"none\" }}\n                >\n                    <div className={MAIN_DIV_CLASS}>\n                        <div\n                            className=\"alert alert-danger\"\n                            role=\"alert\"\n                            style={{marginTop: \"1em\"}}\n                        >\n                            {this.props.error}\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private handleSessIdChange(e: any) {\n        this.setState({sessId: e.target.value.trim()});\n    }\n\n    private handleNickNameChnage(e: any) {\n        this.setState({nickName: e.target.value.trim()});\n    }\n\n    private onKeyPress(evt: any) {\n        evt = evt || window.event;\n        const charCode = evt.keyCode || evt.which;\n        if (charCode === CHAR_CODE_ENTER) {\n            this.onClickSub(null);\n        }\n    }\n\n    private onClickPub(e: any) {\n        this.props.onDecision({\n            mode: \"pub\",\n        });\n    }\n\n    private onClickSub(e: any) {\n        this.props.onDecision({\n            mode: \"sub\",\n            // nickName:  this.state.nickName,\n            nickName: Date.now().toString(),\n            sessionId: this.state.sessId,\n        });\n    }\n}\n","import axios from \"axios\";\r\nimport { IObj } from \"./interfaces\";\r\nimport { Settings } from \"./settings\";\r\n\r\n// TODO: finish\r\n\r\nfunction generateRandomString(): string {\r\n    const len = 3;\r\n    const numbers = new Uint8Array(len);\r\n    const letters: string[] = [];\r\n    window.crypto.getRandomValues(numbers);\r\n    numbers.forEach( (n) => letters.push(n.toString(16)) );\r\n    return letters.join(\"\");\r\n}\r\n\r\nfunction spleep(msec: number) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, msec);\r\n    });\r\n}\r\n\r\nexport class SigServerClient {\r\n\r\n    public static async getIceServers(): Promise<RTCIceServer[]> {\r\n        const url = `${Settings.HTTP_SRV_URL}/ice_servers`;\r\n        const resp = await axios.get(url);\r\n        if (resp.status !== 200 ||\r\n            !resp.data ||\r\n            !resp.data.iceServers\r\n        ) {\r\n            console.warn(\"default ice servers\");\r\n            return Settings.DEFAULT_ICE_SERVERS;\r\n        }\r\n        return resp.data.iceServers;\r\n    }\r\n\r\n    public onCandidate: any;\r\n    public onOffer: any;\r\n    public onAnswer: any;\r\n\r\n    private url: string;\r\n    private ws: any;\r\n    private pendingPromise: any;\r\n    private sessId: string;\r\n    private previousReconnectTime: number;\r\n\r\n    constructor(url: string) {\r\n        this.url = url;\r\n        this.ws = null;\r\n        this.pendingPromise = {};\r\n        this.sessId = \"\";\r\n        this.previousReconnectTime = 0;\r\n    }\r\n\r\n    public getSessId() {\r\n        return this.sessId;\r\n    }\r\n\r\n    public connect() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                console.log(\"try construct websocket\");\r\n                this.ws = new WebSocket(this.url);\r\n                console.log(\"ws constructed\");\r\n            } catch (e) {\r\n                console.log(\"ws construct:: err\");\r\n                reject(e);\r\n                return this.reconnect();\r\n            }\r\n\r\n            this.ws.onopen = resolve;\r\n            this.ws.onerror = (e: Error) => {\r\n                console.warn(\"ws::on_error::\" + e);\r\n            };\r\n            this.ws.onmessage = this.onMessage.bind(this);\r\n            this.ws.onclose = () => {\r\n                this.ws.onerror = null;\r\n                this.ws.onmessage = null;\r\n                console.log(\"ws closed, gonna reconnect\");\r\n                if (Date.now() - this.previousReconnectTime < 2000) {\r\n                    console.log(`wait 2000 msec before reconnect`);\r\n                    setTimeout(this.reconnect.bind(this), 2000);\r\n                } else {\r\n                    this.reconnect();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public logIn(sessionId?: string) {\r\n        return new Promise((resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            if (!sessionId) {\r\n                sessionId = generateRandomString();\r\n                this.sessId = sessionId;\r\n            } else {\r\n                console.log(`login, sessId=${sessionId} (${typeof sessionId})`);\r\n            }\r\n            this.send({\r\n                type: \"login\",\r\n                sess_id: sessionId,\r\n            });\r\n        });\r\n    }\r\n\r\n    public join(sessId: string, nickName: string) {\r\n        return new Promise((resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            this.send({\r\n                type: \"join\",\r\n                sess_id: sessId,\r\n                nickname: nickName,\r\n            });\r\n        });\r\n    }\r\n\r\n    public send(obj: IObj) {\r\n        this.ws.send(JSON.stringify(obj));\r\n    }\r\n\r\n    private onMessage(msg: any) {\r\n        let json: any = {};\r\n        try {\r\n            json = JSON.parse(msg.data);\r\n        } catch (e) {\r\n            console.warn(\"ws: \" + e.message + \". msg.data=\" + msg.data);\r\n            return;\r\n        }\r\n        console.log(\"ws: \", json);\r\n        switch (json.type) {\r\n        case \"login_resp\":\r\n            this.handleLoginResp(json);\r\n            break;\r\n        case \"candidate\":\r\n            this.handleCandidate(json);\r\n            break;\r\n        case \"offer\":\r\n            this.handleOffer(json);\r\n            break;\r\n        case \"answer\":\r\n            this.handleAnswer(json);\r\n            break;\r\n        case \"join_resp\":\r\n            this.handleJoinResp(json);\r\n            break;\r\n        }\r\n    }\r\n\r\n    private handleLoginResp(resp: any) {\r\n        if (resp.status === \"ok\") {\r\n            this.pendingPromise.resolve(this.sessId);\r\n        } else {\r\n            this.pendingPromise.reject(new Error(resp.error));\r\n        }\r\n        this.pendingPromise = {};\r\n    }\r\n\r\n    private handleJoinResp(resp: any) {\r\n        if (resp.status === \"ok\") {\r\n            this.pendingPromise.resolve();\r\n        } else {\r\n            this.pendingPromise.reject(new Error(resp.error));\r\n        }\r\n        this.pendingPromise = {};\r\n    }\r\n\r\n    private handleCandidate(msg: any) {\r\n        console.log(Date.now() + \" ws: got candidate\");\r\n        if (this.onCandidate && typeof this.onCandidate === \"function\") {\r\n            this.onCandidate(msg.candidate);\r\n        }\r\n    }\r\n\r\n    private handleOffer(msg: any) {\r\n        console.log(Date.now() + \" ws: got offer\");\r\n        if (!msg.offer) {\r\n            console.warn(\".offer is \" + msg.offer);\r\n            return;\r\n        }\r\n        if (this.onOffer && typeof this.onOffer === \"function\") {\r\n            this.onOffer(msg.offer);\r\n        }\r\n    }\r\n\r\n    private handleAnswer(msg: any) {\r\n        console.log(Date.now() + \" ws: got answer\");\r\n        if (this.onAnswer && typeof this.onAnswer === \"function\") {\r\n            this.onAnswer(msg.answer);\r\n        }\r\n    }\r\n\r\n    private reconnect() {\r\n        this.previousReconnectTime = Date.now();\r\n        this.ws = null;\r\n        const minDelay = 1;\r\n        const maxDelay = 10;\r\n        let delay = minDelay;\r\n        (async () => {\r\n            while (true) {\r\n                try {\r\n                    console.log(\"try reconnect\");\r\n                    await this.connect();\r\n                    break;\r\n                } catch (e) {\r\n                    console.warn(e);\r\n                    if (delay < maxDelay) {\r\n                        delay++;\r\n                    }\r\n                    console.log(`reconnect failed, now sleeping ${delay} sec`);\r\n                    await spleep(delay * 1000);\r\n                }\r\n            }\r\n            console.log(\"reconnected\");\r\n            if (this.sessId) {\r\n                console.log(\"was logged in before, logging after reconnect\");\r\n                await this.logIn(this.sessId);\r\n                console.log(\"login after reconnect: ok\");\r\n            }\r\n        })();\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Spinner: React.FC = () => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n            <div\r\n                className=\"spinner-border\"\r\n                style={{width: \"3rem\", height: \"3rem\"}}\r\n                role=\"status\"\r\n            >\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import { IObj } from \"./interfaces\";\r\n\r\nexport class UserMedia {\r\n\r\n    public getDisplayMedia(opts?: IObj): Promise<MediaStream> {\r\n        if (!this.canGetDisplayMedia()) {\r\n            throw new Error(\"old browser\");\r\n        }\r\n        if (!opts) {\r\n            opts = {\r\n                audio: false,\r\n                video: {\r\n                    cursor: \"never\",\r\n                },\r\n            };\r\n        }\r\n        return (navigator.mediaDevices as any).getDisplayMedia(opts);\r\n    }\r\n\r\n    public canGetDisplayMedia(): boolean {\r\n        return navigator.mediaDevices && !!(navigator.mediaDevices as any).getDisplayMedia;\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\n\r\nimport { IObj } from \"./interfaces\";\r\nimport { Settings } from \"./settings\";\r\nimport { SigServerClient } from \"./sig-server-client\";\r\nimport Spinner from \"./Spinner\";\r\nimport { UserMedia } from \"./user-media\";\r\n\r\nconst { MAIN_DIV_CLASS } = Settings;\r\n\r\ninterface IState {\r\n    sessId: string;\r\n    error: string;\r\n    loading: boolean;\r\n}\r\n\r\n// dictionary. key = nick; val = rtcpeerconn\r\nconst subscribers: IObj = {\r\n\r\n};\r\n\r\nlet tmpConn: any = null;\r\n\r\nlet candidatesBuff: IObj[] = [];\r\nlet offerSent: boolean = false;\r\n\r\nexport default class PubScreen extends React.Component<{}, IState> {\r\n\r\n    private videoRef: RefObject<HTMLVideoElement>;\r\n    private userMedia: UserMedia;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            sessId: \"\",\r\n            error: \"\",\r\n            loading: true,\r\n        };\r\n        this.videoRef = React.createRef<HTMLVideoElement>();\r\n        this.userMedia = new UserMedia();\r\n        this.copySessIdToClipboard = this.copySessIdToClipboard.bind(this);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (!this.userMedia.canGetDisplayMedia()) {\r\n            this.setState({error: \"you have an old browser, go get a newer one\"});\r\n            return;\r\n        }\r\n        (async () => {\r\n            try {\r\n                const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n                const iceServers = await SigServerClient.getIceServers();\r\n\r\n                const createTmpConn = (strm: any) => {\r\n                    candidatesBuff = [];\r\n                    tmpConn = new RTCPeerConnection({iceServers});\r\n                    tmpConn.addStream(stream);\r\n                    tmpConn.onicecandidate = (event: any) => {\r\n                        console.log(\"on ice\");\r\n                        if (event.candidate) {\r\n                            if (offerSent) {\r\n                                sigServer.send({\r\n                                    type: \"candidate\",\r\n                                    candidate: event.candidate,\r\n                                });\r\n                                console.log(\"candidate sent\");\r\n                            } else {\r\n                                console.log(\"candidate buffered\");\r\n                                candidatesBuff.push(event.candidate);\r\n                            }\r\n                        } else {\r\n                            console.log(\"no event.candidate::\");\r\n                            console.log(event);\r\n                        }\r\n                    };\r\n                };\r\n\r\n                const sendOffer = (off: any) => {\r\n                    sigServer.send({\r\n                        type: \"offer\",\r\n                        offer: off,\r\n                    });\r\n                    offerSent = true;\r\n                    if (candidatesBuff.length) {\r\n                        candidatesBuff.forEach((cand) => {\r\n                            sigServer.send({\r\n                                type: \"candidate\",\r\n                                candidate: cand,\r\n                            });\r\n                        });\r\n                    }\r\n                };\r\n\r\n                console.log(\"gona connect\");\r\n                await sigServer.connect();\r\n                console.log(\"connected\");\r\n\r\n                await sigServer.logIn();\r\n                const sessId = sigServer.getSessId();\r\n                console.log(\"logged in with sess_id=\" + sessId);\r\n\r\n                const stream = await this.userMedia.getDisplayMedia();\r\n\r\n                if (this.videoRef.current) {\r\n                    this.videoRef.current.srcObject = stream;\r\n                }\r\n\r\n                createTmpConn(stream);\r\n\r\n                const offer = await tmpConn.createOffer();\r\n                console.log(\"offer created\");\r\n                tmpConn.setLocalDescription(offer);\r\n\r\n                sigServer.onAnswer = (answer: any) => {\r\n                    tmpConn.onicecandidate = () => {};\r\n                    tmpConn.setRemoteDescription(new RTCSessionDescription(answer));\r\n                    console.log(\"got answer\");\r\n                    subscribers[answer.nickname] = tmpConn;\r\n                    (async () => {\r\n                        console.log(\"creating new tmp connection...\");\r\n                        createTmpConn(stream);\r\n                        const offer = await tmpConn.createOffer();\r\n                        console.log(\"new offer created\");\r\n                        tmpConn.setLocalDescription(offer);\r\n                        sendOffer(offer);\r\n                    })();\r\n                };\r\n\r\n                sendOffer(offer);\r\n\r\n                this.setState({sessId, loading: false});\r\n            } catch (e) {\r\n                console.error(e);\r\n                this.setState({error: e.message});\r\n            }\r\n        })();\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className={MAIN_DIV_CLASS}>\r\n                    <video\r\n                        ref={this.videoRef}\r\n                        autoPlay={true}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: this.state.loading ? \"none\" : \"block\",\r\n                            border: \"1px solid darkgray\",\r\n                            borderRadius: \"0.5em\",\r\n                        }}\r\n                    />\r\n                    {this.getActiveElement()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private copySessIdToClipboard() {\r\n        if (navigator.clipboard && navigator.clipboard.writeText) {\r\n            navigator.clipboard.writeText(this.state.sessId);\r\n        }\r\n    }\r\n\r\n    private getActiveElement(): JSX.Element {\r\n        if (this.state.error) {\r\n            return (\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    {this.state.error}\r\n                </div>\r\n            );\r\n        } else {\r\n            if (this.state.loading) {\r\n                return <Spinner/>;\r\n            } else {\r\n                return (\r\n                    <React.Fragment>\r\n                        <h5 style={{marginTop: \"2em\"}}>\r\n                            Session ID:  <b>{this.state.sessId}</b>\r\n                            &nbsp;&nbsp;\r\n                            <button\r\n                                className=\"btn btn-secondary btn-sm\"\r\n                                onClick={this.copySessIdToClipboard}\r\n                            >\r\n                                Copy\r\n                            </button>\r\n                        </h5>\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","export function translateErrCode(errCode: string): string {\r\n    switch (errCode) {\r\n    case \"ENOTFOUND\":\r\n        return \"Session with given ID not found\";\r\n    default:\r\n        return errCode;\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\nimport { translateErrCode } from \"./errors\";\r\nimport { Settings } from \"./settings\";\r\nimport { SigServerClient } from \"./sig-server-client\";\r\n\r\ninterface IProps {\r\n    sessId: string;\r\n    nickName: string;\r\n    onExit: (e?: Error) => void;\r\n}\r\n\r\nexport default class SubScreen extends React.Component<IProps, {}> {\r\n\r\n    private videoRef: RefObject<HTMLVideoElement>;\r\n\r\n    constructor(p: IProps) {\r\n        super(p);\r\n        this.state = {\r\n            error: \"\",\r\n        };\r\n        this.videoRef = React.createRef<HTMLVideoElement>();\r\n        this.exitOk = this.exitOk.bind(this);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const nickname = this.props.nickName;\r\n        const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n        (async () => {\r\n            console.log(\"sub: gona connect\");\r\n            await sigServer.connect();\r\n            console.log(\"sub: connected\");\r\n\r\n            const iceServers = await SigServerClient.getIceServers();\r\n\r\n            const rtcConnection = new RTCPeerConnection({iceServers});\r\n\r\n            rtcConnection.ontrack = (e) => {\r\n                if (this.videoRef.current) {\r\n                    this.videoRef.current.srcObject = e.streams[0];\r\n                    this.videoRef.current.style.position = \"absolute\";\r\n                    this.videoRef.current.style.top = \"0px\";\r\n                    this.videoRef.current.style.left = \"0px\";\r\n                } else {\r\n                    throw new Error(\"sth went wrong\");\r\n                }\r\n            };\r\n\r\n            rtcConnection.onicecandidate = (event) => {\r\n                console.log(\"on ice\");\r\n                if (event.candidate) {\r\n                    sigServer.send({\r\n                        type: \"candidate\",\r\n                        candidate: event.candidate,\r\n                        nickname,\r\n                    });\r\n                }\r\n            };\r\n\r\n            sigServer.onOffer = (offer: RTCSessionDescriptionInit) => {\r\n                console.log(\"sub:: onoffer: \", offer);\r\n                try {\r\n                    rtcConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n                    rtcConnection.createAnswer().then((answer) => {\r\n                        rtcConnection.setLocalDescription(answer);\r\n                        sigServer.send({\r\n                            type: \"answer\",\r\n                            answer,\r\n                            nickname,\r\n                        });\r\n                    }, (error) => {\r\n                        console.error(error);\r\n                    });\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n\r\n            };\r\n\r\n            sigServer.onCandidate = (cand: RTCIceCandidateInit) => {\r\n                rtcConnection.addIceCandidate(new RTCIceCandidate(cand));\r\n            };\r\n\r\n            try {\r\n                await sigServer.join(this.props.sessId, nickname);\r\n            } catch (e) {\r\n                console.warn(e);\r\n                this.props.onExit(new Error(\r\n                    translateErrCode(e.message),\r\n                ));\r\n            }\r\n        })();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-xs-12\">\r\n                    <video ref={this.videoRef} autoPlay={true} style={{width: \"100%\" }}/>\r\n                    <div\r\n                        // tslint:disable-next-line: jsx-no-multiline-js\r\n                        style={{\r\n                            background: \"rgba(0, 255, 0, .5)\",\r\n                            width: 50,\r\n                            height: 50,\r\n                            position: \"absolute\",\r\n                            top: 0,\r\n                            right: 0,\r\n                            zIndex: 2,\r\n                            textAlign: \"center\",\r\n                            fontSize: \"2em\",\r\n                            cursor: \"pointer\",\r\n                        }}\r\n                        onClick={this.exitOk}\r\n                    >X\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private exitOk() {\r\n        this.props.onExit();\r\n    }\r\n}\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport InitialScreen from \"./InitialScreen\";\nimport { IUserAppMode } from \"./interfaces\";\nimport PubScreen from \"./PubScreen\";\nimport SubScreen from \"./SubScreen\";\n\ninterface IState {\n    appMode?: IUserAppMode;\n    error: string;\n}\n\nexport default class App extends React.Component<{}, IState> {\n\n    constructor(p: {}, c: any) {\n        super(p, c);\n        this.state = {\n            error: \"\",\n        };\n        this.onUserDecision = this.onUserDecision.bind(this);\n        this.onExit = this.onExit.bind(this);\n    }\n\n    public render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <h1 className=\"col-sm-12 App-header2\" style={{textAlign: \"center\"}}>\n                        BeamViewer\n                    </h1>\n                </div>\n                {this.getActiveComponent()}\n            </div>\n        );\n    }\n\n    private onExit(err?: Error) {\n        if (err) {\n            this.setState({appMode: undefined, error: err.message});\n        } else {\n            this.setState({appMode: undefined});\n        }\n    }\n\n    private onUserDecision(decision: IUserAppMode) {\n        this.setState({appMode: decision});\n    }\n\n    private getActiveComponent(): JSX.Element {\n        if (this.state.appMode) {\n            if (this.state.appMode.mode === \"pub\") {\n                return <PubScreen/>;\n            } else if (this.state.appMode.mode === \"sub\") {\n                return (\n                    <SubScreen\n                        nickName={this.state.appMode.nickName}\n                        sessId={this.state.appMode.sessionId}\n                        onExit={this.onExit}\n                    />\n                );\n            } else {\n                throw new Error();\n            }\n        } else {\n            return (\n                <InitialScreen\n                    onDecision={this.onUserDecision}\n                    error={this.state.error}\n                />\n            );\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nif (process.env.NODE_ENV === \"production\" &&\n    window.location.protocol === \"http:\" &&\n    window.location.hostname !== \"localhost\") {\n    console.log(\"redirect to https\");\n    // screen capture api only works via https\n    window.location.replace(window.location.href.replace(\"http:\", \"https:\"));\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\nserviceWorker.unregister();\n"],"sourceRoot":""}