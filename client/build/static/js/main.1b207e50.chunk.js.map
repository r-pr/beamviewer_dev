{"version":3,"sources":["InitalScreen.tsx","settings.ts","sig-server-client.ts","user-media.ts","PubScreen.tsx","SubScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InitialScreen","p","c","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickPub","bind","assertThisInitialized","onClickSub","handleSessIdChange","handleNickNameChnage","state","sessId","nickName","react_default","a","createElement","Fragment","className","type","placeholder","value","onChange","onClick","style","minHeight","e","setState","target","props","onDecision","mode","sessionId","React","Component","wsProtocol","window","location","protocol","srvUrl","host","Settings","WS_SRV_URL","concat","spleep","msec","Promise","resolve","setTimeout","SigServerClient","url","onCandidate","onOffer","onAnswer","ws","pendingPromise","previousReconnectTime","createClass","key","reject","console","log","WebSocket","reconnect","onopen","onerror","warn","onmessage","onMessage","onclose","Date","now","_this2","numbers","Uint8Array","letters","crypto","getRandomValues","forEach","n","push","toString","join","generateRandomString","send","sess_id","obj","JSON","stringify","msg","json","parse","data","message","handleLoginResp","handleCandidate","handleOffer","handleAnswer","resp","status","candidate","offer","answer","_this3","delay","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","connect","abrupt","t0","logIn","stop","UserMedia","opts","canGetDisplayMedia","Error","audio","video","cursor","navigator","mediaDevices","getDisplayMedia","subscribers","tmpConn","candidatesBuff","offerSent","PubScreen","videoRef","userMedia","error","createRef","_callee2","sigServer","createTmpConn","sendOffer","stream","_context2","off","length","cand","strm","RTCPeerConnection","addStream","onicecandidate","event","getSessId","sent","current","srcObject","createOffer","setLocalDescription","setRemoteDescription","RTCSessionDescription","nickname","ref","autoPlay","width","getErrorElement","role","SubScreen","rtcConnection","ontrack","streams","position","top","left","createAnswer","then","addIceCandidate","RTCIceCandidate","background","height","right","zIndex","textAlign","fontSize","onExit","App","onUserDecision","getActiveComponent","appMode","undefined","decision","PubScreen_PubScreen","SubScreen_SubScreen","InitalScreen_InitialScreen","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b207e50.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { IUserAppMode } from \"./interfaces\";\r\n\r\ninterface IProps {\r\n    onDecision: (d: IUserAppMode) => void;\r\n}\r\n\r\ninterface IState {\r\n    sessId: string;\r\n    nickName: string;\r\n}\r\n\r\nexport default class InitialScreen extends React.Component<IProps, IState> {\r\n\r\n    constructor(p: IProps, c: any) {\r\n        super(p, c);\r\n        this.onClickPub = this.onClickPub.bind(this);\r\n        this.onClickSub = this.onClickSub.bind(this);\r\n        this.handleSessIdChange = this.handleSessIdChange.bind(this);\r\n        this.handleNickNameChnage = this.handleNickNameChnage.bind(this);\r\n        this.state = {\r\n            sessId: \"\",\r\n            nickName: \"\",\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-6 col-md-4 col-lg-3\">\r\n                        <div className=\"input-group mb-3\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Session id\"\r\n                                value={this.state.sessId}\r\n                                onChange={this.handleSessIdChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-group mb-3\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Nickname\"\r\n                                value={this.state.nickName}\r\n                                onChange={this.handleNickNameChnage}\r\n                            />\r\n                        </div>\r\n                        <button\r\n                            className=\"btn btn-primary btn-block\"\r\n                            onClick={this.onClickSub}\r\n                        >\r\n                            Join session\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div style={{minHeight: \"2em\"}}/>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-6 col-md-4 col-lg-3 mb-3\">\r\n                        <button\r\n                            className=\"btn btn-success btn-block\"\r\n                            onClick={this.onClickPub}\r\n                        >\r\n                            Create session\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private handleSessIdChange(e: any) {\r\n        this.setState({sessId: e.target.value});\r\n    }\r\n\r\n    private handleNickNameChnage(e: any) {\r\n        this.setState({nickName: e.target.value});\r\n    }\r\n\r\n    private onClickPub(e: any) {\r\n        this.props.onDecision({\r\n            mode: \"pub\",\r\n        });\r\n    }\r\n\r\n    private onClickSub(e: any) {\r\n        this.props.onDecision({\r\n            mode: \"sub\",\r\n            nickName:  this.state.nickName,\r\n            sessionId: this.state.sessId,\r\n        });\r\n    }\r\n}\r\n","interface ISettings {\r\n    WS_SRV_URL: string;\r\n}\r\n\r\nconst wsProtocol = (window.location.protocol === \"https:\") ? \"wss\" : \"ws\";\r\n\r\nconst srvUrl = process.env.NODE_ENV === \"production\" ?\r\n    window.location.host : \"localhost:3322\";\r\n\r\nexport const Settings: ISettings = {\r\n    WS_SRV_URL: `${wsProtocol}://${srvUrl}`,\r\n};\r\n","import { IObj } from \"./interfaces\";\r\n\r\n// TODO: finish\r\n\r\nfunction generateRandomString(): string {\r\n    const len = 3;\r\n    const numbers = new Uint8Array(len);\r\n    const letters: string[] = [];\r\n    window.crypto.getRandomValues(numbers);\r\n    numbers.forEach( (n) => letters.push(n.toString(16)) );\r\n    return letters.join(\"\");\r\n}\r\n\r\nfunction spleep(msec: number) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, msec);\r\n    });\r\n}\r\n\r\nexport class SigServerClient {\r\n\r\n    public onCandidate: any;\r\n    public onOffer: any;\r\n    public onAnswer: any;\r\n\r\n    private url: string;\r\n    private ws: any;\r\n    private pendingPromise: any;\r\n    private sessId: string;\r\n    private previousReconnectTime: number;\r\n\r\n    constructor(url: string) {\r\n        this.url = url;\r\n        this.ws = null;\r\n        this.pendingPromise = {};\r\n        this.sessId = \"\";\r\n        this.previousReconnectTime = 0;\r\n    }\r\n\r\n    public getSessId() {\r\n        return this.sessId;\r\n    }\r\n\r\n    public connect() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                console.log(\"try construct websocket\");\r\n                this.ws = new WebSocket(this.url);\r\n                console.log(\"ws constructed\");\r\n            } catch (e) {\r\n                console.log(\"ws construct:: err\");\r\n                reject(e);\r\n                return this.reconnect();\r\n            }\r\n\r\n            this.ws.onopen = resolve;\r\n            this.ws.onerror = (e: Error) => {\r\n                console.warn(\"ws::on_error::\" + e);\r\n            };\r\n            this.ws.onmessage = this.onMessage.bind(this);\r\n            this.ws.onclose = () => {\r\n                this.ws.onerror = null;\r\n                this.ws.onmessage = null;\r\n                console.log(\"ws closed, gonna reconnect\");\r\n                if (Date.now() - this.previousReconnectTime < 2000) {\r\n                    console.log(`wait 2000 msec before reconnect`);\r\n                    setTimeout(this.reconnect.bind(this), 2000);\r\n                } else {\r\n                    this.reconnect();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public logIn(sessionId?: string) {\r\n        return new Promise((resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            if (!sessionId) {\r\n                sessionId = generateRandomString();\r\n                this.sessId = sessionId;\r\n            } else {\r\n                console.log(`login, sessId=${sessionId} (${typeof sessionId})`);\r\n            }\r\n            this.send({\r\n                type: \"login\",\r\n                sess_id: sessionId,\r\n            });\r\n        });\r\n    }\r\n\r\n    public send(obj: IObj) {\r\n        this.ws.send(JSON.stringify(obj));\r\n    }\r\n\r\n    private onMessage(msg: any) {\r\n        let json: any = {};\r\n        try {\r\n            json = JSON.parse(msg.data);\r\n        } catch (e) {\r\n            console.warn(\"ws: \" + e.message + \". msg.data=\" + msg.data);\r\n            return;\r\n        }\r\n        console.log(\"ws: \", json);\r\n        switch (json.type) {\r\n        case \"login_resp\":\r\n            this.handleLoginResp(json);\r\n            break;\r\n        case \"candidate\":\r\n            this.handleCandidate(json);\r\n            break;\r\n        case \"offer\":\r\n            this.handleOffer(json);\r\n            break;\r\n        case \"answer\":\r\n            this.handleAnswer(json);\r\n            break;\r\n        }\r\n    }\r\n\r\n    private handleLoginResp(resp: any) {\r\n        if (resp.status === \"ok\") {\r\n            this.pendingPromise.resolve(this.sessId);\r\n        } else {\r\n            console.warn(\"ws: \" + JSON.stringify(resp));\r\n            this.pendingPromise.resolve(null);\r\n        }\r\n        this.pendingPromise = {};\r\n    }\r\n\r\n    private handleCandidate(msg: any) {\r\n        console.log(Date.now() + \" ws: got candidate\");\r\n        if (this.onCandidate && typeof this.onCandidate === \"function\") {\r\n            this.onCandidate(msg.candidate);\r\n        }\r\n    }\r\n\r\n    private handleOffer(msg: any) {\r\n        console.log(Date.now() + \" ws: got offer\");\r\n        if (this.onOffer && typeof this.onOffer === \"function\") {\r\n            this.onOffer(msg.offer);\r\n        }\r\n    }\r\n\r\n    private handleAnswer(msg: any) {\r\n        console.log(Date.now() + \" ws: got answer\");\r\n        if (this.onAnswer && typeof this.onAnswer === \"function\") {\r\n            this.onAnswer(msg.answer);\r\n        }\r\n    }\r\n\r\n    private reconnect() {\r\n        this.previousReconnectTime = Date.now();\r\n        this.ws = null;\r\n        const minDelay = 1;\r\n        const maxDelay = 10;\r\n        let delay = minDelay;\r\n        (async () => {\r\n            while (true) {\r\n                try {\r\n                    console.log(\"try reconnect\");\r\n                    await this.connect();\r\n                    break;\r\n                } catch (e) {\r\n                    console.warn(e);\r\n                    if (delay < maxDelay) {\r\n                        delay++;\r\n                    }\r\n                    console.log(`reconnect failed, now sleeping ${delay} sec`);\r\n                    await spleep(delay * 1000);\r\n                }\r\n            }\r\n            console.log(\"reconnected\");\r\n            if (this.sessId) {\r\n                console.log(\"was logged in before, logging after reconnect\");\r\n                await this.logIn(this.sessId);\r\n                console.log(\"login after reconnect: ok\");\r\n            }\r\n        })();\r\n    }\r\n}\r\n","import { IObj } from \"./interfaces\";\r\n\r\nexport class UserMedia {\r\n\r\n    public getDisplayMedia(opts?: IObj): Promise<MediaStream> {\r\n        if (!this.canGetDisplayMedia()) {\r\n            throw new Error(\"old browser\");\r\n        }\r\n        if (!opts) {\r\n            opts = {\r\n                audio: false,\r\n                video: {\r\n                    cursor: \"never\",\r\n                },\r\n            };\r\n        }\r\n        return (navigator.mediaDevices as any).getDisplayMedia(opts);\r\n    }\r\n\r\n    public canGetDisplayMedia(): boolean {\r\n        return navigator.mediaDevices && !!(navigator.mediaDevices as any).getDisplayMedia;\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\n\r\nimport { IObj } from \"./interfaces\";\r\nimport { Settings } from \"./settings\";\r\nimport { SigServerClient } from \"./sig-server-client\";\r\nimport { UserMedia } from \"./user-media\";\r\n\r\ninterface IState {\r\n    sessId: string;\r\n    error: string;\r\n}\r\n\r\n// dictionary. key = nick; val = rtcpeerconn\r\nconst subscribers: IObj = {\r\n\r\n};\r\n\r\nlet tmpConn: any = null;\r\n\r\nlet candidatesBuff: IObj[] = [];\r\nlet offerSent: boolean = false;\r\n\r\nexport default class PubScreen extends React.Component<{}, IState> {\r\n\r\n    private videoRef: RefObject<HTMLVideoElement>;\r\n    private userMedia: UserMedia;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            sessId: \"\",\r\n            error: \"\",\r\n        };\r\n        this.videoRef = React.createRef<HTMLVideoElement>();\r\n        this.userMedia = new UserMedia();\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (!this.userMedia.canGetDisplayMedia()) {\r\n            this.setState({error: \"you have an old brower, go get a newer one\"});\r\n            return;\r\n        }\r\n        // (async () => {\r\n        //     const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n        //     console.log(\"gona connect\");\r\n        //     await sigServer.connect();\r\n        //     console.log(\"connected\");\r\n\r\n        //     await sigServer.logIn();\r\n        //     const sessId: string = sigServer.getSessId();\r\n        //     console.log(\"logged in with sess_id=\" + sessId);\r\n\r\n        //     const stream = await this.userMedia.getDisplayMedia();\r\n        //     console.log(stream);\r\n\r\n        //     if (this.videoRef.current) {\r\n        //         this.videoRef.current.srcObject = stream;\r\n        //     }\r\n\r\n        //     const rtcConnection: any = new RTCPeerConnection({});\r\n        //     rtcConnection.addStream(stream);\r\n\r\n        //     // Setup ice handling\r\n        //     rtcConnection.onicecandidate = (event: any) => {\r\n        //         console.log(\"on ice\");\r\n        //         if (event.candidate) {\r\n        //             sigServer.send({\r\n        //                 type: \"candidate\",\r\n        //                 candidate: event.candidate,\r\n        //             });\r\n        //         }\r\n        //     };\r\n\r\n        //     const offer = await rtcConnection.createOffer();\r\n        //     console.log(\"offer created\");\r\n        //     rtcConnection.setLocalDescription(offer);\r\n\r\n        //     sigServer.onAnswer = (answer: any) => {\r\n        //         rtcConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n        //         console.log(\"got answer\");\r\n        //     };\r\n\r\n        //     sigServer.send({\r\n        //         type: \"offer\",\r\n        //         offer,\r\n        //     });\r\n\r\n        //     this.setState({sessId});\r\n        // })();\r\n\r\n        (async () => {\r\n            const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n            function createTmpConn(strm: any) {\r\n                candidatesBuff = [];\r\n                tmpConn = new RTCPeerConnection({});\r\n                tmpConn.addStream(stream);\r\n                tmpConn.onicecandidate = function (event: any) {\r\n                    console.log(\"on ice\");\r\n                    if (event.candidate) {\r\n                        if (offerSent) {\r\n                            sigServer.send({\r\n                                type: \"candidate\",\r\n                                candidate: event.candidate,\r\n                            });\r\n                            console.log(\"candidate sent\");\r\n                        } else {\r\n                            console.log(\"candidate buffered\");\r\n                            candidatesBuff.push(event.candidate);\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n\r\n            function sendOffer(off: any) {\r\n                sigServer.send({\r\n                    type: \"offer\",\r\n                    offer: off,\r\n                });\r\n                offerSent = true;\r\n                if (candidatesBuff.length) {\r\n                    candidatesBuff.forEach((cand) => {\r\n                        sigServer.send({\r\n                            type: \"candidate\",\r\n                            candidate: cand,\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n\r\n            console.log(\"gona connect\");\r\n            await sigServer.connect();\r\n            console.log(\"connected\");\r\n\r\n            await sigServer.logIn();\r\n            const sessId = sigServer.getSessId();\r\n            console.log(\"logged in with sess_id=\" + sessId);\r\n\r\n            const stream = await this.userMedia.getDisplayMedia();\r\n\r\n            if (this.videoRef.current) {\r\n                this.videoRef.current.srcObject = stream;\r\n            }\r\n\r\n            createTmpConn(stream);\r\n\r\n            const offer = await tmpConn.createOffer();\r\n            console.log(\"offer created\");\r\n            tmpConn.setLocalDescription(offer);\r\n\r\n            sigServer.onAnswer = (answer: any) => {\r\n                tmpConn.onicecandidate = () => {};\r\n                tmpConn.setRemoteDescription(new RTCSessionDescription(answer));\r\n                console.log(\"got answer\");\r\n                subscribers[answer.nickname] = tmpConn;\r\n                (async () => {\r\n                    console.log(\"creating new tmp connection...\");\r\n                    createTmpConn(stream);\r\n                    const offer = await tmpConn.createOffer();\r\n                    console.log(\"new offer created\");\r\n                    tmpConn.setLocalDescription(offer);\r\n                    sendOffer(offer);\r\n                })();\r\n            };\r\n\r\n            sendOffer(offer);\r\n\r\n            this.setState({sessId});\r\n\r\n        })();\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6 col-md-4 col-lg-3\">\r\n                    <video ref={this.videoRef} autoPlay={true} style={{width: \"100%\" }}/>\r\n                    <p>Session Id: <b>{this.state.sessId}</b></p>\r\n                    {this.getErrorElement()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getErrorElement() {\r\n        if (this.state.error !== \"\") {\r\n            return (\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    {this.state.error}\r\n                </div>\r\n            );\r\n        }\r\n        return <div/>;\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\nimport { Settings } from \"./settings\";\r\nimport { SigServerClient } from \"./sig-server-client\";\r\n\r\ninterface IProps {\r\n    sessId: string;\r\n    nickName: string;\r\n    onExit: () => void;\r\n}\r\n\r\nexport default class SubScreen extends React.Component<IProps, {}> {\r\n\r\n    private videoRef: RefObject<HTMLVideoElement>;\r\n\r\n    constructor(p: IProps) {\r\n        super(p);\r\n        this.videoRef = React.createRef<HTMLVideoElement>();\r\n        console.log(\"sub screen ctor::ws_srv_url:\" + Settings.WS_SRV_URL);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const nickname = this.props.nickName;\r\n        const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n        (async () => {\r\n            console.log(\"sub: gona connect\");\r\n            await sigServer.connect();\r\n            console.log(\"sub: connected\");\r\n\r\n            const rtcConnection = new RTCPeerConnection({});\r\n\r\n            rtcConnection.ontrack = (e) => {\r\n                if (this.videoRef.current) {\r\n                    this.videoRef.current.srcObject = e.streams[0];\r\n                    this.videoRef.current.style.position = \"absolute\";\r\n                    this.videoRef.current.style.top = \"0px\";\r\n                    this.videoRef.current.style.left = \"0px\";\r\n                } else {\r\n                    throw new Error(\"sth went wrong\");\r\n                }\r\n            };\r\n\r\n            rtcConnection.onicecandidate = (event) => {\r\n                console.log(\"on ice\");\r\n                if (event.candidate) {\r\n                    sigServer.send({\r\n                        type: \"candidate\",\r\n                        candidate: event.candidate,\r\n                        nickname,\r\n                    });\r\n                }\r\n            };\r\n\r\n            sigServer.onOffer = (offer: RTCSessionDescriptionInit) => {\r\n                rtcConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n                rtcConnection.createAnswer().then((answer) => {\r\n                    rtcConnection.setLocalDescription(answer);\r\n                    sigServer.send({\r\n                        type: \"answer\",\r\n                        answer,\r\n                        nickname,\r\n                    });\r\n                }, (error) => {\r\n                    console.error(error);\r\n                });\r\n            };\r\n\r\n            sigServer.onCandidate = (cand: RTCIceCandidateInit) => {\r\n                rtcConnection.addIceCandidate(new RTCIceCandidate(cand));\r\n            };\r\n\r\n            sigServer.send({\r\n                type: \"join\",\r\n                sess_id: this.props.sessId,\r\n                nickname,\r\n            });\r\n\r\n        })();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-xs-12\">\r\n                    <video ref={this.videoRef} autoPlay={true} style={{width: \"100%\" }}/>\r\n                    <div\r\n                        // tslint:disable-next-line: jsx-no-multiline-js\r\n                        style={{\r\n                            background: \"rgba(0, 255, 0, .5)\",\r\n                            width: 50,\r\n                            height: 50,\r\n                            position: \"absolute\",\r\n                            top: 0,\r\n                            right: 0,\r\n                            zIndex: 2,\r\n                            textAlign: \"center\",\r\n                            fontSize: \"2em\",\r\n                            cursor: \"pointer\",\r\n                        }}\r\n                        onClick={this.props.onExit}\r\n                    >X\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport InitialScreen from \"./InitalScreen\";\nimport { IUserAppMode } from \"./interfaces\";\nimport PubScreen from \"./PubScreen\";\nimport SubScreen from \"./SubScreen\";\n\ninterface IState {\n    appMode?: IUserAppMode;\n}\n\nexport default class App extends React.Component<{}, IState> {\n\n    constructor(p: {}, c: any) {\n        super(p, c);\n        this.state = {};\n        this.onUserDecision = this.onUserDecision.bind(this);\n        this.onExit = this.onExit.bind(this);\n        // this.getActiveComponent = this.getActiveComponent.bind(this);\n    }\n\n    public render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <h1 className=\"col-sm-12 App-header2\">\n                        BeamViewer\n                    </h1>\n                </div>\n                {this.getActiveComponent()}\n            </div>\n        );\n    }\n\n    private onExit() {\n        this.setState({appMode: undefined});\n    }\n\n    private onUserDecision(decision: IUserAppMode) {\n        this.setState({appMode: decision});\n    }\n\n    private getActiveComponent(): JSX.Element {\n        if (this.state.appMode) {\n            if (this.state.appMode.mode === \"pub\") {\n                return <PubScreen/>;\n            } else if (this.state.appMode.mode === \"sub\") {\n                return (\n                    <SubScreen\n                        nickName={this.state.appMode.nickName}\n                        sessId={this.state.appMode.sessionId}\n                        onExit={this.onExit}\n                    />\n                );\n            } else {\n                throw new Error();\n            }\n        } else {\n            return <InitialScreen onDecision={this.onUserDecision}/>;\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\nserviceWorker.unregister();\n"],"sourceRoot":""}