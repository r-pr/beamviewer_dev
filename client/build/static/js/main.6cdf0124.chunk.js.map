{"version":3,"sources":["InitialScreen.tsx","settings.ts","sig-server-client.ts","user-media.ts","PubScreen.tsx","SubScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InitialScreen","p","c","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickPub","bind","assertThisInitialized","onClickSub","handleSessIdChange","handleNickNameChnage","state","sessId","nickName","react_default","a","createElement","Fragment","className","type","placeholder","value","onChange","onClick","style","minHeight","e","setState","target","trim","props","onDecision","mode","Date","now","toString","sessionId","React","Component","wsProtocol","window","location","protocol","srvUrl","host","Settings","WS_SRV_URL","concat","spleep","msec","Promise","resolve","setTimeout","SigServerClient","url","onCandidate","onOffer","onAnswer","ws","pendingPromise","previousReconnectTime","createClass","key","reject","console","log","WebSocket","reconnect","onopen","onerror","warn","onmessage","onMessage","onclose","_this2","numbers","Uint8Array","letters","crypto","getRandomValues","forEach","n","push","join","generateRandomString","send","sess_id","obj","JSON","stringify","msg","json","parse","data","message","handleLoginResp","handleCandidate","handleOffer","handleAnswer","resp","status","candidate","offer","answer","_this3","delay","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","connect","abrupt","t0","logIn","stop","UserMedia","opts","canGetDisplayMedia","Error","audio","video","cursor","navigator","mediaDevices","getDisplayMedia","subscribers","tmpConn","candidatesBuff","offerSent","PubScreen","videoRef","userMedia","error","loading","createRef","_callee2","sigServer","createTmpConn","sendOffer","stream","_context2","strm","RTCPeerConnection","addStream","onicecandidate","event","off","length","cand","getSessId","sent","current","srcObject","createOffer","setLocalDescription","setRemoteDescription","RTCSessionDescription","nickname","ref","autoPlay","width","display","border","borderRadius","getActiveElement","role","height","marginTop","SubScreen","rtcConnection","ontrack","streams","position","top","left","createAnswer","then","addIceCandidate","RTCIceCandidate","background","right","zIndex","textAlign","fontSize","onExit","App","onUserDecision","getActiveComponent","appMode","undefined","decision","PubScreen_PubScreen","SubScreen_SubScreen","InitialScreen_InitialScreen","Boolean","hostname","match","replace","href","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cdf0124.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { IUserAppMode } from \"./interfaces\";\r\n\r\ninterface IProps {\r\n    onDecision: (d: IUserAppMode) => void;\r\n}\r\n\r\ninterface IState {\r\n    sessId: string;\r\n    nickName: string;\r\n}\r\n\r\nexport default class InitialScreen extends React.Component<IProps, IState> {\r\n\r\n    constructor(p: IProps, c: any) {\r\n        super(p, c);\r\n        this.onClickPub = this.onClickPub.bind(this);\r\n        this.onClickSub = this.onClickSub.bind(this);\r\n        this.handleSessIdChange = this.handleSessIdChange.bind(this);\r\n        this.handleNickNameChnage = this.handleNickNameChnage.bind(this);\r\n        this.state = {\r\n            sessId: \"\",\r\n            nickName: \"\",\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-6 col-md-4 col-lg-3\">\r\n                        <div className=\"input-group mb-3\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Session id\"\r\n                                value={this.state.sessId}\r\n                                onChange={this.handleSessIdChange}\r\n                            />\r\n                        </div>\r\n                        {   // tslint:disable-next-line: jsx-no-multiline-js\r\n                            /* <div className=\"input-group mb-3\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Nickname\"\r\n                                value={this.state.nickName}\r\n                                onChange={this.handleNickNameChnage}\r\n                            />\r\n                        </div> */}\r\n                        <button\r\n                            className=\"btn btn-primary btn-block\"\r\n                            onClick={this.onClickSub}\r\n                        >\r\n                            Join session\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div style={{minHeight: \"2em\"}}/>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-6 col-md-4 col-lg-3 mb-3\">\r\n                        <button\r\n                            className=\"btn btn-success btn-block\"\r\n                            onClick={this.onClickPub}\r\n                        >\r\n                            Create session\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private handleSessIdChange(e: any) {\r\n        this.setState({sessId: e.target.value.trim()});\r\n    }\r\n\r\n    private handleNickNameChnage(e: any) {\r\n        this.setState({nickName: e.target.value.trim()});\r\n    }\r\n\r\n    private onClickPub(e: any) {\r\n        this.props.onDecision({\r\n            mode: \"pub\",\r\n        });\r\n    }\r\n\r\n    private onClickSub(e: any) {\r\n        this.props.onDecision({\r\n            mode: \"sub\",\r\n            // nickName:  this.state.nickName,\r\n            nickName: Date.now().toString(),\r\n            sessionId: this.state.sessId,\r\n        });\r\n    }\r\n}\r\n","interface ISettings {\r\n    WS_SRV_URL: string;\r\n}\r\n\r\nconst wsProtocol = (window.location.protocol === \"https:\") ? \"wss\" : \"ws\";\r\n\r\nconst srvUrl = process.env.NODE_ENV === \"production\" ?\r\n    window.location.host : \"localhost:3322\";\r\n\r\nexport const Settings: ISettings = {\r\n    WS_SRV_URL: `${wsProtocol}://${srvUrl}`,\r\n};\r\n","import { IObj } from \"./interfaces\";\r\n\r\n// TODO: finish\r\n\r\nfunction generateRandomString(): string {\r\n    const len = 3;\r\n    const numbers = new Uint8Array(len);\r\n    const letters: string[] = [];\r\n    window.crypto.getRandomValues(numbers);\r\n    numbers.forEach( (n) => letters.push(n.toString(16)) );\r\n    return letters.join(\"\");\r\n}\r\n\r\nfunction spleep(msec: number) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, msec);\r\n    });\r\n}\r\n\r\nexport class SigServerClient {\r\n\r\n    public onCandidate: any;\r\n    public onOffer: any;\r\n    public onAnswer: any;\r\n\r\n    private url: string;\r\n    private ws: any;\r\n    private pendingPromise: any;\r\n    private sessId: string;\r\n    private previousReconnectTime: number;\r\n\r\n    constructor(url: string) {\r\n        this.url = url;\r\n        this.ws = null;\r\n        this.pendingPromise = {};\r\n        this.sessId = \"\";\r\n        this.previousReconnectTime = 0;\r\n    }\r\n\r\n    public getSessId() {\r\n        return this.sessId;\r\n    }\r\n\r\n    public connect() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                console.log(\"try construct websocket\");\r\n                this.ws = new WebSocket(this.url);\r\n                console.log(\"ws constructed\");\r\n            } catch (e) {\r\n                console.log(\"ws construct:: err\");\r\n                reject(e);\r\n                return this.reconnect();\r\n            }\r\n\r\n            this.ws.onopen = resolve;\r\n            this.ws.onerror = (e: Error) => {\r\n                console.warn(\"ws::on_error::\" + e);\r\n            };\r\n            this.ws.onmessage = this.onMessage.bind(this);\r\n            this.ws.onclose = () => {\r\n                this.ws.onerror = null;\r\n                this.ws.onmessage = null;\r\n                console.log(\"ws closed, gonna reconnect\");\r\n                if (Date.now() - this.previousReconnectTime < 2000) {\r\n                    console.log(`wait 2000 msec before reconnect`);\r\n                    setTimeout(this.reconnect.bind(this), 2000);\r\n                } else {\r\n                    this.reconnect();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public logIn(sessionId?: string) {\r\n        return new Promise((resolve, reject) => {\r\n            this.pendingPromise = { resolve, reject };\r\n            if (!sessionId) {\r\n                sessionId = generateRandomString();\r\n                this.sessId = sessionId;\r\n            } else {\r\n                console.log(`login, sessId=${sessionId} (${typeof sessionId})`);\r\n            }\r\n            this.send({\r\n                type: \"login\",\r\n                sess_id: sessionId,\r\n            });\r\n        });\r\n    }\r\n\r\n    public send(obj: IObj) {\r\n        this.ws.send(JSON.stringify(obj));\r\n    }\r\n\r\n    private onMessage(msg: any) {\r\n        let json: any = {};\r\n        try {\r\n            json = JSON.parse(msg.data);\r\n        } catch (e) {\r\n            console.warn(\"ws: \" + e.message + \". msg.data=\" + msg.data);\r\n            return;\r\n        }\r\n        console.log(\"ws: \", json);\r\n        switch (json.type) {\r\n        case \"login_resp\":\r\n            this.handleLoginResp(json);\r\n            break;\r\n        case \"candidate\":\r\n            this.handleCandidate(json);\r\n            break;\r\n        case \"offer\":\r\n            this.handleOffer(json);\r\n            break;\r\n        case \"answer\":\r\n            this.handleAnswer(json);\r\n            break;\r\n        }\r\n    }\r\n\r\n    private handleLoginResp(resp: any) {\r\n        if (resp.status === \"ok\") {\r\n            this.pendingPromise.resolve(this.sessId);\r\n        } else {\r\n            console.warn(\"ws: \" + JSON.stringify(resp));\r\n            this.pendingPromise.resolve(null);\r\n        }\r\n        this.pendingPromise = {};\r\n    }\r\n\r\n    private handleCandidate(msg: any) {\r\n        console.log(Date.now() + \" ws: got candidate\");\r\n        if (this.onCandidate && typeof this.onCandidate === \"function\") {\r\n            this.onCandidate(msg.candidate);\r\n        }\r\n    }\r\n\r\n    private handleOffer(msg: any) {\r\n        console.log(Date.now() + \" ws: got offer\");\r\n        if (!msg.offer) {\r\n            console.warn(\".offer is \" + msg.offer);\r\n            return;\r\n        }\r\n        if (this.onOffer && typeof this.onOffer === \"function\") {\r\n            this.onOffer(msg.offer);\r\n        }\r\n    }\r\n\r\n    private handleAnswer(msg: any) {\r\n        console.log(Date.now() + \" ws: got answer\");\r\n        if (this.onAnswer && typeof this.onAnswer === \"function\") {\r\n            this.onAnswer(msg.answer);\r\n        }\r\n    }\r\n\r\n    private reconnect() {\r\n        this.previousReconnectTime = Date.now();\r\n        this.ws = null;\r\n        const minDelay = 1;\r\n        const maxDelay = 10;\r\n        let delay = minDelay;\r\n        (async () => {\r\n            while (true) {\r\n                try {\r\n                    console.log(\"try reconnect\");\r\n                    await this.connect();\r\n                    break;\r\n                } catch (e) {\r\n                    console.warn(e);\r\n                    if (delay < maxDelay) {\r\n                        delay++;\r\n                    }\r\n                    console.log(`reconnect failed, now sleeping ${delay} sec`);\r\n                    await spleep(delay * 1000);\r\n                }\r\n            }\r\n            console.log(\"reconnected\");\r\n            if (this.sessId) {\r\n                console.log(\"was logged in before, logging after reconnect\");\r\n                await this.logIn(this.sessId);\r\n                console.log(\"login after reconnect: ok\");\r\n            }\r\n        })();\r\n    }\r\n}\r\n","import { IObj } from \"./interfaces\";\r\n\r\nexport class UserMedia {\r\n\r\n    public getDisplayMedia(opts?: IObj): Promise<MediaStream> {\r\n        if (!this.canGetDisplayMedia()) {\r\n            throw new Error(\"old browser\");\r\n        }\r\n        if (!opts) {\r\n            opts = {\r\n                audio: false,\r\n                video: {\r\n                    cursor: \"never\",\r\n                },\r\n            };\r\n        }\r\n        return (navigator.mediaDevices as any).getDisplayMedia(opts);\r\n    }\r\n\r\n    public canGetDisplayMedia(): boolean {\r\n        return navigator.mediaDevices && !!(navigator.mediaDevices as any).getDisplayMedia;\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\n\r\nimport { IObj } from \"./interfaces\";\r\nimport { Settings } from \"./settings\";\r\nimport { SigServerClient } from \"./sig-server-client\";\r\nimport { UserMedia } from \"./user-media\";\r\n\r\ninterface IState {\r\n    sessId: string;\r\n    error: string;\r\n    loading: boolean;\r\n}\r\n\r\n// dictionary. key = nick; val = rtcpeerconn\r\nconst subscribers: IObj = {\r\n\r\n};\r\n\r\nlet tmpConn: any = null;\r\n\r\nlet candidatesBuff: IObj[] = [];\r\nlet offerSent: boolean = false;\r\n\r\nexport default class PubScreen extends React.Component<{}, IState> {\r\n\r\n    private videoRef: RefObject<HTMLVideoElement>;\r\n    private userMedia: UserMedia;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            sessId: \"\",\r\n            error: \"\",\r\n            loading: true,\r\n        };\r\n        this.videoRef = React.createRef<HTMLVideoElement>();\r\n        this.userMedia = new UserMedia();\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (!this.userMedia.canGetDisplayMedia()) {\r\n            this.setState({error: \"you have an old browser, go get a newer one\"});\r\n            return;\r\n        }\r\n        // (async () => {\r\n        //     const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n        //     console.log(\"gona connect\");\r\n        //     await sigServer.connect();\r\n        //     console.log(\"connected\");\r\n\r\n        //     await sigServer.logIn();\r\n        //     const sessId: string = sigServer.getSessId();\r\n        //     console.log(\"logged in with sess_id=\" + sessId);\r\n\r\n        //     const stream = await this.userMedia.getDisplayMedia();\r\n        //     console.log(stream);\r\n\r\n        //     if (this.videoRef.current) {\r\n        //         this.videoRef.current.srcObject = stream;\r\n        //     }\r\n\r\n        //     const rtcConnection: any = new RTCPeerConnection({});\r\n        //     rtcConnection.addStream(stream);\r\n\r\n        //     // Setup ice handling\r\n        //     rtcConnection.onicecandidate = (event: any) => {\r\n        //         console.log(\"on ice\");\r\n        //         if (event.candidate) {\r\n        //             sigServer.send({\r\n        //                 type: \"candidate\",\r\n        //                 candidate: event.candidate,\r\n        //             });\r\n        //         }\r\n        //     };\r\n\r\n        //     const offer = await rtcConnection.createOffer();\r\n        //     console.log(\"offer created\");\r\n        //     rtcConnection.setLocalDescription(offer);\r\n\r\n        //     sigServer.onAnswer = (answer: any) => {\r\n        //         rtcConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n        //         console.log(\"got answer\");\r\n        //     };\r\n\r\n        //     sigServer.send({\r\n        //         type: \"offer\",\r\n        //         offer,\r\n        //     });\r\n\r\n        //     this.setState({sessId});\r\n        // })();\r\n\r\n        (async () => {\r\n            try {\r\n                const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n                const createTmpConn = (strm: any) => {\r\n                    candidatesBuff = [];\r\n                    tmpConn = new RTCPeerConnection({});\r\n                    tmpConn.addStream(stream);\r\n                    tmpConn.onicecandidate = function (event: any) {\r\n                        console.log(\"on ice\");\r\n                        if (event.candidate) {\r\n                            if (offerSent) {\r\n                                sigServer.send({\r\n                                    type: \"candidate\",\r\n                                    candidate: event.candidate,\r\n                                });\r\n                                console.log(\"candidate sent\");\r\n                            } else {\r\n                                console.log(\"candidate buffered\");\r\n                                candidatesBuff.push(event.candidate);\r\n                            }\r\n                        } else {\r\n                            console.log(\"no event.candidate::\");\r\n                            console.log(event);\r\n                        }\r\n                    };\r\n                };\r\n\r\n                const sendOffer = (off: any) => {\r\n                    sigServer.send({\r\n                        type: \"offer\",\r\n                        offer: off,\r\n                    });\r\n                    offerSent = true;\r\n                    if (candidatesBuff.length) {\r\n                        candidatesBuff.forEach((cand) => {\r\n                            sigServer.send({\r\n                                type: \"candidate\",\r\n                                candidate: cand,\r\n                            });\r\n                        });\r\n                    }\r\n                };\r\n\r\n                console.log(\"gona connect\");\r\n                await sigServer.connect();\r\n                console.log(\"connected\");\r\n\r\n                await sigServer.logIn();\r\n                const sessId = sigServer.getSessId();\r\n                console.log(\"logged in with sess_id=\" + sessId);\r\n\r\n                const stream = await this.userMedia.getDisplayMedia();\r\n\r\n                if (this.videoRef.current) {\r\n                    this.videoRef.current.srcObject = stream;\r\n                }\r\n\r\n                createTmpConn(stream);\r\n\r\n                const offer = await tmpConn.createOffer();\r\n                console.log(\"offer created\");\r\n                tmpConn.setLocalDescription(offer);\r\n\r\n                sigServer.onAnswer = (answer: any) => {\r\n                    tmpConn.onicecandidate = () => {};\r\n                    tmpConn.setRemoteDescription(new RTCSessionDescription(answer));\r\n                    console.log(\"got answer\");\r\n                    subscribers[answer.nickname] = tmpConn;\r\n                    (async () => {\r\n                        console.log(\"creating new tmp connection...\");\r\n                        createTmpConn(stream);\r\n                        const offer = await tmpConn.createOffer();\r\n                        console.log(\"new offer created\");\r\n                        tmpConn.setLocalDescription(offer);\r\n                        sendOffer(offer);\r\n                    })();\r\n                };\r\n\r\n                sendOffer(offer);\r\n\r\n                this.setState({sessId, loading: false});\r\n            } catch (e) {\r\n                console.error(e);\r\n                this.setState({error: e.message});\r\n            }\r\n        })();\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6 col-md-4 col-lg-3\">\r\n                    <video\r\n                        ref={this.videoRef}\r\n                        autoPlay={true}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: this.state.loading ? \"none\" : \"block\",\r\n                            border: \"1px solid darkgray\",\r\n                            borderRadius: \"0.5em\",\r\n                        }}\r\n                    />\r\n                    {this.getActiveElement()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getActiveElement(): JSX.Element {\r\n        if (this.state.error) {\r\n            return (\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    {this.state.error}\r\n                </div>\r\n            );\r\n        } else {\r\n            if (this.state.loading) {\r\n                return (\r\n                    <div className=\"d-flex justify-content-center\">\r\n                        <div\r\n                            className=\"spinner-border\"\r\n                            style={{width: \"3rem\", height: \"3rem\"}}\r\n                            role=\"status\"\r\n                        >\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <React.Fragment>\r\n                        <h5 style={{marginTop: \"2em\"}}>\r\n                            Session Id: <b>{this.state.sessId}</b>\r\n                        </h5>\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React, { RefObject } from \"react\";\r\nimport { Settings } from \"./settings\";\r\nimport { SigServerClient } from \"./sig-server-client\";\r\n\r\ninterface IProps {\r\n    sessId: string;\r\n    nickName: string;\r\n    onExit: () => void;\r\n}\r\n\r\nexport default class SubScreen extends React.Component<IProps, {}> {\r\n\r\n    private videoRef: RefObject<HTMLVideoElement>;\r\n\r\n    constructor(p: IProps) {\r\n        super(p);\r\n        this.videoRef = React.createRef<HTMLVideoElement>();\r\n        console.log(\"sub screen ctor::ws_srv_url:\" + Settings.WS_SRV_URL);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const nickname = this.props.nickName;\r\n        const sigServer = new SigServerClient(Settings.WS_SRV_URL);\r\n\r\n        (async () => {\r\n            console.log(\"sub: gona connect\");\r\n            await sigServer.connect();\r\n            console.log(\"sub: connected\");\r\n\r\n            const rtcConnection = new RTCPeerConnection({});\r\n\r\n            rtcConnection.ontrack = (e) => {\r\n                if (this.videoRef.current) {\r\n                    this.videoRef.current.srcObject = e.streams[0];\r\n                    this.videoRef.current.style.position = \"absolute\";\r\n                    this.videoRef.current.style.top = \"0px\";\r\n                    this.videoRef.current.style.left = \"0px\";\r\n                } else {\r\n                    throw new Error(\"sth went wrong\");\r\n                }\r\n            };\r\n\r\n            rtcConnection.onicecandidate = (event) => {\r\n                console.log(\"on ice\");\r\n                if (event.candidate) {\r\n                    sigServer.send({\r\n                        type: \"candidate\",\r\n                        candidate: event.candidate,\r\n                        nickname,\r\n                    });\r\n                }\r\n            };\r\n\r\n            sigServer.onOffer = (offer: RTCSessionDescriptionInit) => {\r\n                console.log(\"sub:: onoffer: \", offer);\r\n                try {\r\n                    rtcConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n                    rtcConnection.createAnswer().then((answer) => {\r\n                        rtcConnection.setLocalDescription(answer);\r\n                        sigServer.send({\r\n                            type: \"answer\",\r\n                            answer,\r\n                            nickname,\r\n                        });\r\n                    }, (error) => {\r\n                        console.error(error);\r\n                    });\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n\r\n            };\r\n\r\n            sigServer.onCandidate = (cand: RTCIceCandidateInit) => {\r\n                rtcConnection.addIceCandidate(new RTCIceCandidate(cand));\r\n            };\r\n\r\n            sigServer.send({\r\n                type: \"join\",\r\n                sess_id: this.props.sessId,\r\n                nickname,\r\n            });\r\n\r\n        })();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-xs-12\">\r\n                    <video ref={this.videoRef} autoPlay={true} style={{width: \"100%\" }}/>\r\n                    <div\r\n                        // tslint:disable-next-line: jsx-no-multiline-js\r\n                        style={{\r\n                            background: \"rgba(0, 255, 0, .5)\",\r\n                            width: 50,\r\n                            height: 50,\r\n                            position: \"absolute\",\r\n                            top: 0,\r\n                            right: 0,\r\n                            zIndex: 2,\r\n                            textAlign: \"center\",\r\n                            fontSize: \"2em\",\r\n                            cursor: \"pointer\",\r\n                        }}\r\n                        onClick={this.props.onExit}\r\n                    >X\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport InitialScreen from \"./InitialScreen\";\r\nimport { IUserAppMode } from \"./interfaces\";\r\nimport PubScreen from \"./PubScreen\";\r\nimport SubScreen from \"./SubScreen\";\r\n\r\ninterface IState {\r\n    appMode?: IUserAppMode;\r\n}\r\n\r\nexport default class App extends React.Component<{}, IState> {\r\n\r\n    constructor(p: {}, c: any) {\r\n        super(p, c);\r\n        this.state = {};\r\n        this.onUserDecision = this.onUserDecision.bind(this);\r\n        this.onExit = this.onExit.bind(this);\r\n        // this.getActiveComponent = this.getActiveComponent.bind(this);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <h1 className=\"col-sm-12 App-header2\">\r\n                        BeamViewer\r\n                    </h1>\r\n                </div>\r\n                {this.getActiveComponent()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onExit() {\r\n        this.setState({appMode: undefined});\r\n    }\r\n\r\n    private onUserDecision(decision: IUserAppMode) {\r\n        this.setState({appMode: decision});\r\n    }\r\n\r\n    private getActiveComponent(): JSX.Element {\r\n        if (this.state.appMode) {\r\n            if (this.state.appMode.mode === \"pub\") {\r\n                return <PubScreen/>;\r\n            } else if (this.state.appMode.mode === \"sub\") {\r\n                return (\r\n                    <SubScreen\r\n                        nickName={this.state.appMode.nickName}\r\n                        sessId={this.state.appMode.sessionId}\r\n                        onExit={this.onExit}\r\n                    />\r\n                );\r\n            } else {\r\n                throw new Error();\r\n            }\r\n        } else {\r\n            return <InitialScreen onDecision={this.onUserDecision}/>;\r\n        }\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nif (process.env.NODE_ENV === \"production\" &&\r\n    window.location.protocol === \"http:\" &&\r\n    window.location.hostname !== \"localhost\") {\r\n    console.log(\"redirect to https\");\r\n    // screen capture api only works via https\r\n    window.location.replace(window.location.href.replace(\"http:\", \"https:\"));\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}